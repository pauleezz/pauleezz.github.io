[ { "title": "可擴展Web應用系統的十二項架構設計原則", "url": "/posts/scalable-web-app-12-factor/", "categories": "Development", "tags": "Memo", "date": "2022-03-03 21:00:00 +0800", "snippet": "此篇文章主要是記錄2022年3月3日由Philipz鄭淳尹分享：可擴展Web應用系統的十二項架構設計原則的內容，並把自己覺得重要以及不會的知識記錄下來，未來有需要回故時能夠快速查找。The AKF Scale CubeScale Cube 是由一個科技顧問公司AKF所提出的一個系統設計模型，其中定義了怎麼切分服務、如何scaling產品等等。模型總共分為三個維度（X, Y, Z軸），其分別代表的是： X軸：水平擴展，將服務和資料複製多份，如K8S的水平擴展 Y軸：根據功能、業務或相似的內容來對系統進行拆分 Z軸：根據服務或是資料進行Sharding分區，如建立兩個Data Center在不同Region十二原則原則一：避免過度設計不一定每個都需要用到微服務架構或複雜的解決方案，因為實踐成本過高、維運麻煩，越難找到問題。例如綠界科技系統原本拆分成微服務架構並透過API呼叫，但是因為response time太慢，最後的解決方案是把各個服務集中到VM上，使得API呼叫時，減少網路延遲的狀況。此外在Istio設計文檔也提到：「過早的優化複雜性是萬惡之源，或者：我如何學會停止擔心並熱愛單體應用」。對於是否已經過度設計可透過測試同仁是否可以輕易理解架構設計方案，來驗證是否過度設計。-&amp;gt; 業務的量還沒到不需要過早優化原則二：服務X軸擴展當應用伺服器的CPU或Memory使用量高時，複製相同服務（透過VM或容器）來分攤運算負載。假設應用系統沒有被設計成Stateless或是資料外部化時（cache, storage, DB），必須把Load Balancer設計成sticky sessions，確保使用者在sticky時間內都會連線到同一台伺服器，或是使用集中式的session儲存伺服器（e.g. Redis, Hazelcast, Ignite等），確保其他伺服器也可以有狀態資訊。其他共用檔案可透過NFS掛載或是寫到資料庫來達到Stateless。-&amp;gt; 無需改寫程式，但無法根本解決問題、維運成本增加原則三：資料X軸擴展當資料庫讀寫比例、CPU用量高時，可透過複製相同資料庫來分攤交易時的讀寫。將單一資料庫拆分成唯獨及唯寫的讀寫分離架構（CQRS），寫入（20%）時寫到Master Node，讀取（80%）時使用Slave Node。建議透過標準的API或channel來access DB，而不是直接去使用。例如MySQL解決Scaling（沒有InnoDB）的方式是把read command透過Virtual IP到replica讀取，而write command則是直接寫入到source中。 X軸擴展優劣分析pros: 易於實現，最常使用cons: 需要完整複製資料，增加成本、session共用會導致可用性及可擴展性問題原則四：服務Y軸擴展根據不同業務、Domain來拆分資料、系統、開發團隊，解決大型複雜系統在開發時團隊耗費大量時間在溝通以及系統功能耦合。可參考資料的ER Model或Domain Driven Design設計方法來拆分服務、利用APM監控系統瓶頸，將回應時間長的服務獨立出新服務或依照Database per service設計模式避免拆分出的服務存取到其他服務的資料，當資料異動時影響其他服務原則五：資料Y軸擴展將資料庫分成不同功能（線上交易作業與BI報表作業分開、Report job從唯獨副本執行分析），達到資料分流 Y軸擴展優劣分析pros: 增加可擴展性（根本解決）cons: 重構系統複雜度增加，更多服務複雜度指數增加，成本高原則六：服務Z軸擴展面對全球性服務，地理位置網路物理距離成為系統效能瓶頸，因此需要根據使用者獨特屬性來進行服務分流。解決方法有： 基於HTTP，使用Global HTTP Load Balancer達到Content-Based Routing 基於DNS，使用支援動態DNS的LB服務，在客戶查詢DNS解析時，根據客戶IP回傳最近的服務 前端靜態網頁的JS配合後端Content-Based Routing分流-&amp;gt; 避免單一區域failure影響整體服務，可透過IaC加速建置及降低為運成本原則七：資料Z軸擴展若單一資料表比數非常大，造成資料庫執行效率過低，且短期無法優化或修改程式拆分為多個資料表時，可利用Sharding或垂直分片、水平分片來增加效率，一般較常用水平分片，除非業務邏輯改變，否則避免採用垂直分片分片策略 Key-Based: 選定其中一列為shard key，並透過hash function分配 Range-Based: 價格0~49, 50~99的分開 Dictionary-Based: 按照客戶所在地區區分 Entity Groups: 相關的表格放在同一分片中，有更強的一致性-&amp;gt; 減少indexing時間，Data Center異地多活（AA mode），GCP Cloud Spanner可同時改善資料庫和跨區域資料一致性問題案例：Vitess - 自動化分片中間層背景：YouTube業務增長（2010），單一資料庫無法容納資料，勢必須要進行分片解決方法： 讀寫分離：為寫入流量建立一個主要資料庫，讀取流量另建一個副本資料庫 讀取流量仍造成副本資料庫超載，因此增加更多副本資料庫，作為臨時解決方案 寫入流量過高，對資料進行分片 YouTube application layer經過修改，讓程式可以識別正確的資料庫分片進行查詢Vitess在應用層與資料庫間引入代理來routing和manage資料庫，透過中間層代理來具備橫向擴展能力MySQL: 每個MySQL主備叢集由一個MySQL主服務器和一個或多個MySQL從服務器組成VTGate: 作為單一入口並導流到不同MySQL主備叢集，導流/分片邏輯放在Topology裡，知道存放位置後進行SQL拆分，將子SQL分發給各個VTTablet裡，VTTablet回傳結果後再聚和、排序回傳到clientTopology: 維護Vitess叢集的metadata，e.g. 某個資料庫的各個分片都儲存在哪些MySQL主備叢集上 Z軸擴展優劣分析pros: 因地制宜，例如分割機房pod，以便符合當地個資法cons: 無法根本解決組織上問題，主要是進行分流X軸、Y軸可以解決系統performance的問題，但無法解決開發上performance的問題原則八：善用公有雲服務當業務需求有臨時性、突增性需求，或開發新型態業務面對未來需求的不確定性便可使用公有雲服務降低建制機房成本原則九：選擇適當資料庫綜合考量數據量、儲存量、回應時間等因素選擇適合的工具。例如關連式資料庫適合：交易的一致性、ACID屬性，但成本高難以擴展。 OLTP: Row oriented OLAPL Column orientedClickHouse: 可以進行SQL查詢的OLAP原則十：務必使用分散式監控系統服務X軸擴展及Y軸擴展後，大量應用系統在監控時會造成維運負擔，且出現問題時難以查找。使用可觀測性（Observability）的分散式解決分案來診斷及預防系統問題，可觀測性方案分為： logging日誌 metrics指標 tracing追蹤將這三大資料集中儲存及分析，以便確認問題，或根據監控數據規劃運算資源。OpenAPM這個網站可以查詢各個平台服務可以紀錄、查詢哪些資料，並做出互相搭配，確保可以組合運作。原則十一：設計分層快取機制減輕核心系統負擔，減少到資料庫的網頁請求量，節省網路頻寬。可透過 把前端靜態網頁檔案放置到CDN服務 開放網路設備快取機制，減少後端讀取次數 使用Web, Reverse proxy, API Gateway快取機制 設計應用伺服器的集中式快取架構，如：Redis, Hazelcast, Ignite等 大量且重複的資料庫查詢可使用Object/Entity快取功能，如JPA cache或Hibernate cache等 使用資料庫本身的快取如：memory table, IMDG等，但可能被廠商綁定原則十二：適時採用非同步通訊方式無法透過增加硬體設備來改善系統效能時，可修改既有架構設計或改成非阻塞式的響應式程式設計，透過Message Broker（IBM MQ, Kafka）設計非同步是通訊，或使用響應式（Reactive）開發框架拆解服務溝通方式（成本高）。從業務流程分析或事件風暴（Event Storming）了解現有流程是否可以使用非同步方式取代，例如星巴克的二階段交付，先結帳再叫名取餐。將訊息（Message）分成須確認結果的命令（Command）和單純傳遞已發生的事件（Event），Command使用支援Request-Reply的MQ，事件則使用Fire&amp;amp;Forget的可擴展Event Bus，如KafkaEnterprise Integration Patterns書中主要是在討論大企業系統如何進行整合、溝通，這本書的作者寫了篇文章：Your Coffee Shop Doesn’t Use Two-Phase Commit，裡面提到應用程式要跟partner API溝通，但是外部相依性服務溝通成為瓶頸時，可使用非同步的方式：首先Client使用結帳API，結帳API先被寫入到Queue中，接著Queue的API的應用程式再慢慢的消化Queue，完成後再透過topic訂閱的對外專用API來做通知，呼叫partner信用卡API，partner信用卡API回傳結果後寫入資料庫，這時Client就可以使用結帳API來查詢交易結果。大型企業應用系統架構Reference十二項架構設計原則簡報THE SCALE CUBESQL vs. NoSQL Database: When to Use, How to Choose" }, { "title": "敏捷培訓心得", "url": "/posts/agile-bootcamp/", "categories": "Internship, CAP", "tags": "Agile Bootcamp, Scrum", "date": "2022-02-13 21:00:00 +0800", "snippet": "這篇筆記主要是記錄在參加國泰CAP實習舉辦的敏捷培訓時所學習到的知識，並且再加上寒假這段時間在實習時每日參加的CCMA Daily Sync所得出的心得。之前大學二年級的時候第一次聽到這個名詞，上網查了之後也沒有很了解到底是在敏捷什麼，也沒有再繼續深入研究。這次的培訓是由柯仁傑老師來介紹敏捷開發的特色以及應用。敏捷觀念簡介每次講到敏捷軟體開發時，少不了的就是敏捷宣言（Agile Manifesto）了，當初考研究所補習時資管課本也出現過，當年台大資管所題目也有考出來，其宣言如下: 個人與互動 重於 流程與工具 可用的軟體 重於 詳盡的文件 與客戶合作 重於 合約協商  回應變化 重於 遵循計劃 個人與互動 重於 流程與工具在專案近行時，流程與工具只是達成的手段，最重要的其實是與你一起進行開發的團隊夥伴，若是大家有很好的溝通、討論方式，可以讓專案成功的機率大大增加。可用的軟體 重於 詳盡的文件在宣言裡面，開發過程中並沒有進度條（e.g. 已完成80%）的情況，只有可不可以運作的產品，這樣的想法是因為專案產出的目的是要提供給使用者使用，假設沒有完成，其實意義就不大了。與客戶合作 重於 合約協商 消費者的需求可能隨著時間產生改變，若只依照合約所明示的項目進行開發的話，很難及時應對將來潛在的變化，且需要再花時間討論合約的修改，導致效率低下。回應變化 重於 遵循計劃 在專案一開始時，整個輪廓並沒有這麼的明確，因此會需要多次與使用者進行溝通並提出改善，若是埋頭一直自己做事可能會使產品做出來時與客戶期望不同，增加更多的溝通成本。在這邊常常出現一個誤解，認為例如說只要可以交出軟體就好不需要再去寫詳細文件。事實上，兩邊都是非常重要的，只不過左邊的重要性在略高於右邊，但並不代表右邊的部分就不重要，就完全地捨棄它。從這張圖可以發現，除了常聽過的Scrum, Kanban, XP等方法外，還有其他不同的開發方法包含在Agile的雨傘底下。其實只要符合Agile宣言精神的都可以叫做Agile的方法，而其中Scrum是裡面最流行的一種方法，原因是他相對其他的方法好學習，角色分工明確，又不會提到太多的技術細節，老闆也會聽得懂內容，但也是最難精通的方法。Scrum 基礎觀念介紹上圖是Scrum的框架，接下來會列出我覺得一些比較特別的地方：Product Owner (PO)將要做的事情和需求列出來、排出優先順序並放在Product Backlog中。Scrum Master (SM)看團隊有沒有依照Scrum的流程來執行。Product Backlog產品需求項目清單（Product Backlog Item）種類主要分為四種，分別是需求、錯誤、技術債、技術評估。列出的需求可能透過使用案例、使用者故事或是任何其他格式來做表達，錯誤是之前在開發過程中出現的Bug，技術債是之前可能為了能夠快速開發在應該採用最佳方案時進行了妥協，改用短期內能加速軟體開發的方案，使得在未來可能帶來的額外開發負擔，最後的技術評估則是因為不知道這個項目要怎麼做，所以要花時間來評估怎麼做。Product Backlog Item的排序依據是尤其商業價值來去做排序可以發現Product Backlog前面的項目比較細，然後越後面的項目越大，會這樣顯示的原因是Product Backlog較前面的代表優先順序越高，是最近就要完成的事情，因此要做的事情也會釐清的比較清楚，並且切分的會比較細。Sprint Planning在Sprint的第一天開始Sprint規劃會議，根據開發團隊的開發速度，從Product Backlog中選擇這次要做的Item有哪些，並且放入Sprint Backlog中。Sprint一個Sprint可能會歷時1-4週，最常見的是兩週一次。在Sprint開始時會有一個Sprint Planning，從Product Backlog中決定這個迭代要做哪些事情，並放到Sprint Backlog中。Daily Scrum開發團隊與Scrum Master每天早上會開一個15分鐘的的會議（產品負責人與利害關係人可選），主要目標是要互相了解大家的進度如何，討論主題主要包含「昨天完成了什麼」、「今天打算做甚麼」、「遭遇到了什麼阻礙與困難」這三類。「遭遇到了什麼阻礙與困難」重要之處是因為在提出自己遇到的問題時，自己遇到的問題可能是別人也會遇到的問題，達到互相交流的效果，同時也可以讓大家更Involve在會議之中。要注意的是，在這其中只會提出問題，不會當下討論細節、怎麼解決，這樣才能確保Daily Standup能在15分鐘內完成。Daily Standup 也可以判斷出一個團隊的氣氛如何，從一開始有沒有人願意開始分享或者是提出問題時有沒有人願意主動提出幫忙，可說是團隊氣氛的照妖鏡。Sprint Review在完成一個Sprint後舉行，由整個敏捷團隊（開發團隊, SM, PO）與利害關係人共同檢視及驗收這次Sprint所完成的事項，將做完的項目（可用的軟體才算產出）放在Increment中，未完成的項目再放回到Product Backlog中，重新排優先順序。在Sprint Review最重要的目的是要給stackholder展示目前的進度及結果為何，在展示的過程中，要注意做完就先demo，才能及時調整，才不會發現沒有通過標準卻沒有時間進行修改、以講故事的型態來展示，且展示時間不要太長、展示對象也要確定找到對的利害關係人、對於任何的回饋要保持開放。Sprint Retrospective在一個Sprint結束前、檢視會議結束後會開Sprint Retrospective，來去看在這次執行過程中發生了甚麼問題、如何改進等等，希望做事方法能夠更有效率，讓下一個Sprint能夠運行得更順利。Sprint Retrospective流程圖一開始討論時可能會不知道要從哪個部分開始討論，這時候可以先設定一個方向先討論，再去深討發生的原因並作出改善。此外雖然一個問題在被討論之後可能不會完全被解決，但是可以降低這些問題發生的可能性。4個常見的Sprint Retrospective的做法 Start, Stop, Continue Mad Sad Glad Speed Boat 魚骨圖Start, Stop, ContinueMad Sad Glad幫助團隊去尋找哪些讓他們開心、難過、生氣，甚麼事做得好，甚麼事可以再做改進，讓大家互相瞭解對方的想法，並從中改善、增加團隊士氣及工作滿意度Speed Boat目的：讓團隊清楚知道每個項目的意義，以及釐清為什麼是放在這個分類 Goal: 要達成的目標 Helping team: 幫助專案順利進行的原因 Delay: 延後目前專案進度的原因 risk: 可能導致將來做得比較慢的原因魚骨圖這些Sprint Retrospective其實目的都差不多，只是用不同方式來進行。Scrum只有說要做甚麼事情，沒有告訴你怎麼做，因此每個團隊可能都有不同的做法敏捷宣言的起草人Jeff Sutherland說過，在執行Scrum時要考慮的問題有兩個:經常檢查你的方向是否正確，你 做的東西是否是客戶要的？隨時跟客戶保持溝通一致，假如做的是不是user要的，才能及時做更改是否有更任何方法，可以改進目前作法，讓你更快更好？用戶故事/用戶故事地圖老師提出了「建立高鐵售票網站」的題目，讓小組在短暫的時間內去發想可能的功能有哪些？並使用使用者故事（User Story）的方式來表達，格式為以下：As a [role] I can [function] so that [business value] e.g. As a bookstore customer, I can search for book by the title, So that I can easily find all books with that title.在這裡的business value所要表達的是為什麼要這個功能?要解決的是甚麼事？並且是使用商業語言來去描述。藉由User Story我們就先拿這個東西讓我們可以跟用戶討論再來擬定細節，並不是就不寫細節，這邊的重點會是在討論這塊。討論過程中，常常是想到什麼就填上什麼，並沒有一個系統性的方式，導致後面較難想到新的功能。這時候，User Story Mapping就會是非常重要的角色了。如果單純從頭發想User Story，想出來的項目常常沒有統整性，只是想到甚麼就甚麼，這時候透過使用者流程來模擬各種使用上可能會用到的功能，就可以更有系統性的條列出來。一個User Story Mapping包含了User Goal，並以Persona來描述使用者輪廓，這樣老闆才會了解這樣做的原因為何。以下是User Story Mapping範例：橫軸是工作流程順序，縱軸是優先順序，裡面的便條紙可能是一個功能或是故事。可以發現除了不同的Epic, Story外，也有分成三個Release順序，第一個release主要會是以最簡單的功能出發。最後的高鐵線上購票系統就會長這樣：包含了訂票、付款、取票、退票、效能等high level的需求描述，並先從網頁開始開發，再進階到7-11、手機整合到最後的優惠組合。Scrum…要考慮的點評估原則要如何有效地評估出這次Sprint可完成的項目數呢？主要分為兩種做法： 憑感覺 計算速度比較常用的方式是透過感覺的方式，利用之前的經驗來做判斷，或根據這幾周平均完成幾件事來去做判斷。在評估項目數的時候，有一些方法可以遵循… 小比大容易以拼樂高為例，假如是拼出一個小玩具或零件的話，可以容易地獄沽出可能要花多久時間完成，那麼假如要拼一個很大的樂高的話，每個人預估要花的時間就會相差很大，或是準確度很低。因此將一個很大的項目拆分乘小項目來去記算時，時間估算會比較精準。 相對比絕對容易以101為例，直接判斷出101準確的高度是有難度的，那麼假如換成是以微風南山為基準，101的高度是它的幾倍呢？這時候就可以透過比較的方式來有效地估算出來。在敏捷開發也是一樣，找一個story為基礎，去判斷出其他story難度的相對差距為何，來決定他大概需要花多少時間來完成。而評估story難度的方式常選擇一個項目作為基準，並設定Story Point成5分來跟其他項目做比較。故事點數（Story Point）可以用來表示該項目複雜程度，可以用在User Story, 功能, 某個工作上，並從開發的複雜程度以及開發的風險來去界定。Playing Poker是一個常用在團隊中決定Story Point多寡的一種方法，進行方式是每個人來投票這項story的點數為何，假設結果差距很大時，再請投出高分與低分的同仁來分享給分數的想法，之後再進行第二輪投票。Story Point的目的不是要去精確的估出分數為何，而是要讓大家的想法清楚表達，確保透明度假如估出來的分數很大，那麼可以再細分該項目，讓各個細項的預估能夠更準確。做完的定義是什麼？如何定義做完一個項目？做完代表的是可以提交給用戶使用，對於Sprint來說，做完代表的是已經展示過了、並已經更新Product Backlog，對於故事來說，做完代表的是單元測試、功能性測試完成、沒有P1/P2的bug，確定好做完的定義有哪些後，才能讓大家了解何謂做完，也更能預估出完成所需要的時間。在驗收條件方面，可以是由一堆敘述所組成，並清楚定義出通過和失敗的標準為何，也就更容易地判斷出這項目是否滿足驗收條件，且對每一條功能列出驗收標準，將來的結果也更能符合客戶的期望。範例：User Story:作為用戶，我希望能夠註冊服務，以便我可以開始線上購物驗收標準: 用戶必須填完所有必填欄位才能提交註冊 來自同一個IP地提交，只能在30分鐘內提交3次 用戶註冊成功後會收到通知郵件 事實上，一個Story做完比Task做完重要很多Scrum 開發方法總結Scrum有明確的角色分工、進行流程，使得這個框架讓人容易學習，但是就像圍棋比賽一樣，瞭解規則是不夠的（只看教學影片就變強），需要實際動手做、有教練指導才能真正進步。參考資料 上課內容 What is Agile? What is Scrum? What Is Agile Methodology In Project Management?" }, { "title": "PDIS-RAY4.0 實習心得", "url": "/posts/pdis-ray4-internship/", "categories": "Internship, PDIS-Ray4.0", "tags": "Design Thinking, Ui Ux Design, Web Development, Website Design", "date": "2019-09-06 11:33:00 +0800", "snippet": "2020年的暑假，我參加了RAY 4.0青年學生體檢政府網站計畫的見習生。初次耳聞這個計畫是從同學討論『欸這計畫可以看到唐鳳耶！』之中得知，在看了計畫說明後發現對於這個計畫十分有興趣，報名後也很榮幸地被錄取了。這兩個月的累積讓我學到事情。所以想藉由剛結束記憶猶新時，分享這段時間的一些心得，也讓大家參考參考。PDIS&amp;amp;RAY4.0是什麼？PDIS (Public Digital Innovation Space)中文名為公共數位創新空間，主要是協助政府部會提升數位服務品質，以服務設計思維優化公務體系的流程和工具。RAY4.0，全名為Rescue Action by Youth .gov 2020，也就是這個青年學生體檢政府網站數位服務專案本身，招募30位青年學生一同優化政府網站數位服務，並進行檢核、設計出改善後的原型。在專案中不時有部會工作坊和定期見面會，一同與機關同仁協作和分享進度與其他小組互相交流。見習內容我們這組負責的是基隆市政府全球資訊網(目前網站頁面已更新設計) 的網站服務改善，整個專案大致分為四大流程：一、暸解 User這個階段主要分為兩個部分：網站現況分析我們實際操作網站，並嘗試列出網站的主要服務，但卻發現很難清楚界定各項服務內容以及各服務的取得路徑，因為基隆市政府主要是以機關導向提供查詢，假設不清楚所需的服務是隸屬於哪一機關，便無法取得所需的服務。我們也檢視了網站的整體布局及分析網站資訊架構，發現目前基隆市政府的資訊架構是混亂且不易釋讀的。與部會人員訪談中，得知基隆市政府全球資訊網是屬於整合資訊式的網站，他們也希望透過整合各項的服務分類，以服務歸納的方式來簡化資訊取得複雜度。使用者研究針對上述的網站現況分析所確立出的目標與問題，我們廣發使用者問卷並招募了受訪者進行使用者研究，訪談主要分為三個步驟進行：使用者訪談、網站易用性測試、使用者分類服務。藉由使用者訪談所得到的資訊，我們透過親合圖法找出使用者痛點及需求，並透過網站易用性測試中所設立的任務，來挖掘他們在找尋過程中遇到的痛點以及想法，最後的使用者分類服務則是透過讓受訪者列出主要功能與網頁架構排序的分類方式，來了解對於使用者來說較為重視整府網站的服務類型及功能佈局的呈現方式為何。使用者訪談中所得到的回饋二、定義核心議題針對上個階段的結果，我們擬定了Persona和Customer Journey Map以確立使用者輪廓和釐清操作過程中的旅程以及斷點，並定義出了關鍵問題共有：服務歸納不清楚、服務命名不直觀、網站內容頁面說明不足和基隆在地特色未充分展現四個面向，並根據各關鍵問題提出改善方向，成為後續進行網頁改善的參考依據。根據關鍵問題所提出的四大改善方向為了重新歸納服務，我們決定從訂定資訊架構開始，藉由盤點各個服務，將相似的服務整合並群組成一個類別。因為基隆市政府網站屬於統整性的入口式網站，因此在分類方向上，主要是透過廣而淺而非窄而深的方式，透過廣做為入口，讓使用者從眾多服務中，快速找到對應的網站及資訊，不需要層層地費時尋找所欲查詢的目標。而在各類別命名方面，目標是能讓名稱能妥善代表該類別的內容，同時強調彼此類別的區別性，減少混淆的發生。在導覽列頁面，我們發現便民服務、市政服務、主題服務館三個區塊中，部分的服務內容重疊，且僅列有少數服務，因此我們決定整併這三區的服務內容，形成主題服務，並增設市政資訊作為政府提供資訊的窗口。三、打造 Wireframe在這個階段的目的主要就是打造初步網站的架構雛形，我們設計了A版、B版兩種版本，分別代表著基本、可行性高和有創意、突破框架兩個版本，探索更多設計可能，最終融合兩種wireframe測試結果。在A版本方面，因為基隆市政府已經開始著手進行網頁改版計畫，所以我們以即將改版的網頁layout為參考，並從先前與部會人員所討論出的結果，依照機關與民眾需求更動服務項目的優先順序。為了將各服務妥善歸類，我們一一將各服務逐層分類，最終歸納、命名出了12大類別項目，各類別在瀏覽時也會跳出該類別的重點服務，讓使用者能夠快速了解各類別含義。點入類別後，各項服務會提供簡短說明、網站名稱，讓試用者能快速了解該服務內容。A版本12大類別項目B版本方面，在參考各國政府網站時，我們發現像夏威夷、密西根、香港等網站都有以身份別的分類來幫助取得各個服務，這也成為我們打造B版wireframe的靈感來源，將網站大致分為三種身份別：觀光旅客、政府服務和基隆市民，重新分配各服務項目的所在位置。B版本分眾服務四、Prototype設計經過使用者訪談、測試後，我們發現兩種版本的wireframe皆有各自的支持者，最終決定將兩種服務呈現方式同時納入prototype裡，並命名為基隆服務，迎合不同搜尋模式偏好的使用者，並根據使用者回饋，將B版本的政府服務改名為非基隆市民，減少名稱誤解的發生。兩個不同版本的服務分類方式在招標資訊和徵才資訊上，我們根據使用者所提供的建議，於標題前方加上標籤提供使用者快速搜尋，並將頁面分為簡版與詳版的設計以提供不同資訊量與內容呈現，讓不同目的（只是大致瀏覽資訊或逐一仔細閱讀）的使用者都能方便的使用。詳版與簡版的資訊呈現使用XD設計頁面同時，我也開始了網站建置的工作，網站以React為框架，Bootstrap協助版面配置。程式碼連結在此XD上滿滿的頁面同一時間Protype也在使用者訪談中所得到的回饋下，經過Low-fidelity 到high-fidelity的層層迭代與修正，形成了最後網站的樣貌。high-fidelity prototype首頁頁面見習心得在此之前比較少有參與設計相關的經驗，這次也著實讓我學到許多UI/UX的知識。與組員交流、進行設計思考中也讓我瞭解到，設計出一個方便、人性化的網站是多麽的困難，需要考慮的因素眾多，不論是在使用者訪談、定義關鍵問題、wireframe的建立等階段都是需要嚴謹的分析和討論才能完成。因為專案主要是以遠端進行，雖然時間調配上變得充裕，但是與組員協作時的時間掌控就變得十分重要。如何擬定時間、因應迭代做出時間配置的更動，將任務繼續傳遞下去讓我獲益良多。在每個小組中，有Designer, Researcher和Engineer三個角色，身為Engineer的我在這次專案中比較屬於輔助的角色，目的是在設計網頁時提供實際建置時可能會發生的難處以及需要考慮問題。因為是組內唯一的工程師，因此網站的建置主要是由我所完成。要在短短一個多禮拜的時間完成多達時間完成40個網頁的程式碼也是全新的挑戰，這個過程中也讓我了解到系統規劃的重要性，將可重複利用的元件模組化、模擬可能的使用情境減少錯誤狀況發生，這些應用讓我可以在減少開發時間下，仍然能夠完善完成網頁建置。在部會工作坊中，與部會人員分別討論到了公部門在執行決策時所要考慮的限制，以及此更動影響到哪些項目、利害關係人，讓我對公部門的執行有更加了解。而每次的見面會也都讓我受益良多，不僅可以了解到其他組別的進行方式以及個別的創新做法並加以學習，報告後的提問時間也可以藉由其他組的所提出的疑問來找出組內沒有看出的問題、盲點，並且反思目前所做的部分如何改進、讓研究更加完整。部會工作坊合照這次讓我學習到最多的就是團體合作方式了，像是任務分配、組員協作及溝通，也讓我深深了解到團體的重要性。因為一次徵求受訪者的失誤使得遭到投訴，在第一時間內組內不是互相指責找出代罪羔羊，而是檢討在整個約訪流程中所發生的疏失以及如何改善，並致電道歉，在下次的見面會也與其他組分享這次的經驗提供警惕。這次的經驗讓我瞭解到良好的團隊再發生問題時是一起解決問題，做出最好的災害應變而不是互相推卸。這短短的兩個月咻的一下就過去了，回想報到當天好像只是不久前的事情，不論是在定期見面會享用超級好吃的美食、前往基隆進行訪談結束後拖著疲憊的身軀回家、部會工作坊和討論時進行腦力激盪、在XD上想破頭設計頁面的種種，這些回憶都是前所未有的經歷，謝謝PDIS提供這個機會，讓我的暑假有精彩的生活！" } ]
